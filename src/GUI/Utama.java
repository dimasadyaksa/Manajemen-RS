package GUI;


import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import Objek.*;
import BackgroundWork.*;
import java.util.ArrayList;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dimas Adiyaksa
 */


public class Utama extends javax.swing.JFrame {
        List listPasien = new List();
        List listPegawai = new List();
        List listRuang   = new List();
        List listPenyakit = new List();
        List semuaKategori = new List();
        
        public static boolean IsAdmin = false;
        /**
     * Creates new form Utama
     */
    public Utama() throws SQLException{
        initComponents();
        ruang.hide();
        PRuang.hide();
        if(IsAdmin == true){
            tambah.show();
            updt.show();
            Hapus.show();
        }else{
            tambah.hide();
            updt.hide();
            Hapus.hide();
        }
        
        
        try{
            listPasien.tambahPasien();
            listPegawai.tambahPegawai();
            listRuang.tambahRuang();
            listPenyakit.tambahPenyakit();
            
         /*   semuaKategori.tambahPasien();
            semuaKategori.tambahPegawai();
            semuaKategori.tambahRuang();
            semuaKategori.tambahPenyakit();*/
        
         }catch(Exception e){
            JOptionPane.showMessageDialog(null,"x");
        }
        
        Data.setDefaultEditor(Object.class,null);
         listPasien.showListPasien(Data);
     //    semuaKategori.showAll(Data,listPasien.getList());
        
         updtenabled();
       
        setLocationRelativeTo(null);
        
        tanggal();
        
        
        
    }
    
    public static void reload(){
        
    }
    
    public void updtenabled(){
        if(kategori.getSelectedItem().equals("Semua Kategori")){
            updt.setEnabled(false);            
        }else{
             if(Data.getSelectedRow()!=-1){
                updt.setEnabled(true);
            }else{
                 updt.setEnabled(false);
             }
            
        }
        
        if(Data.getSelectedRow()!=-1){
            Hapus.setEnabled(true);
        }else{
            Hapus.setEnabled(false);
        }
    }
    
    public void refresh() throws SQLException{
        if(kategori.getSelectedItem().toString().equals("Pasien")){
            listPasien.showListPasien(Data);
        }else if(kategori.getSelectedItem().toString().equals("Dokter")){
            listPegawai.showListPegawai(Data, 1);
        }else if(kategori.getSelectedItem().toString().equals("Perawat")){
            listPegawai.showListPegawai(Data, 2);
        }else if(kategori.getSelectedItem().toString().equals("Ruang")){
            listRuang.showRuang(Data);
        }else{
            semuaKategori.showAll(Data,listPasien.getList());
        }
        
        if(IsAdmin == true){
            adminControl();
        }else{
            tambah.hide();
            updt.hide();
        }
        
        updtenabled();
    }
    
    public void adminControl(){
        tambah.show();
        updt.show();
        Hapus.show();
        indikatorAdmin.setText("Akses Admin");
        login.setText("Log Out");
        
    }
    
    
    public void tanggal(){
        Date sekarang = new Date();
        SimpleDateFormat format = new SimpleDateFormat("dd MMMM yyyy");
        
        String tgl = format.format(sekarang);
        date.setText(tgl);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        judul = new javax.swing.JLabel();
        kategori = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        Data = new javax.swing.JTable();
        PKategori = new javax.swing.JLabel();
        tagline = new javax.swing.JLabel();
        PRuang = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        ruang = new javax.swing.JComboBox<>();
        searchBar = new javax.swing.JTextField();
        tombolCari = new javax.swing.JButton();
        indikatorAdmin = new javax.swing.JLabel();
        login = new javax.swing.JButton();
        date = new javax.swing.JLabel();
        tambah = new javax.swing.JButton();
        updt = new javax.swing.JButton();
        Hapus = new javax.swing.JButton();
        details = new javax.swing.JButton();
        refreshBut = new javax.swing.JButton();
        Keluar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sisfo Klinik ITERA");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(204, 204, 204));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(860, 550));
        setName("UTAMA"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(860, 550));
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        judul.setBackground(new java.awt.Color(255, 255, 255));
        judul.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        judul.setForeground(new java.awt.Color(4, 96, 163));
        judul.setText("KLINIK ITERA");
        judul.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        kategori.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pasien", "Dokter", "Perawat", "Ruang" }));
        kategori.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                kategoriItemStateChanged(evt);
            }
        });

        Data.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Data.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        Data.setEditingColumn(0);
        Data.setEditingRow(0);
        Data.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Data);

        PKategori.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PKategori.setText("Pilih Kategori");

        tagline.setBackground(new java.awt.Color(255, 255, 255));
        tagline.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        tagline.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tagline.setText("Sistem informasi Klinik ITERA");

        PRuang.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PRuang.setText("Pilih Ruang");
        PRuang.setEnabled(false);

        ruang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ruang.setEnabled(false);

        tombolCari.setText("Cari");
        tombolCari.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tombolCariMouseClicked(evt);
            }
        });

        indikatorAdmin.setText("Akses Tamu");

        login.setText("Masuk");
        login.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginMouseClicked(evt);
            }
        });
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        date.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        date.setText("25 Maret 2018");
        date.setMaximumSize(new java.awt.Dimension(500, 300));
        date.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        tambah.setText("Tambah");
        tambah.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tambahMouseClicked(evt);
            }
        });

        updt.setText("Perbarui");
        updt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updtMouseClicked(evt);
            }
        });

        Hapus.setText("Hapus");
        Hapus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                HapusMouseClicked(evt);
            }
        });
        Hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HapusActionPerformed(evt);
            }
        });

        details.setText("Lihat Detail");
        details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsActionPerformed(evt);
            }
        });

        refreshBut.setText("Refresh");
        refreshBut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButMouseClicked(evt);
            }
        });

        Keluar.setText("Keluar");
        Keluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeluarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tagline, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(judul, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(indikatorAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(details)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(Hapus)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(updt)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tambah)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(login)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(Keluar))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(PKategori)
                                .addComponent(kategori, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(56, 56, 56)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(tombolCari)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(refreshBut))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(PRuang)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ruang, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 840, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(judul)
                        .addGap(27, 27, 27))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(tagline)
                        .addGap(4, 4, 4)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PKategori)
                    .addComponent(PRuang)
                    .addComponent(ruang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(kategori, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tombolCari)
                        .addComponent(refreshBut))
                    .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indikatorAdmin)
                    .addComponent(login)
                    .addComponent(tambah)
                    .addComponent(updt)
                    .addComponent(Hapus)
                    .addComponent(details)
                    .addComponent(Keluar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
                
    }//GEN-LAST:event_loginActionPerformed

    private void tombolCariMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tombolCariMouseClicked
        // TODO add your handling code here:
        if(!searchBar.getText().equals("")){
       if(kategori.getSelectedItem().equals("Pasien")){
            listPasien.cariPasien(Data, searchBar.getText());   
        }else if(kategori.getSelectedItem().equals("Dokter")){
            listPegawai.CariDokter(Data, searchBar.getText(),1);
        }else if(kategori.getSelectedItem().equals("Perawat")){
            listPegawai.CariDokter(Data, searchBar.getText(),2);
        }else{
            listRuang.cariRuang(Data, searchBar.getText());
        }
        }else{
            try {
                this.refresh();
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tombolCariMouseClicked

    private void loginMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginMouseClicked
        // TODO add your handling code here:
        if(login.getText().equals("Masuk")){
            Login log = new Login();
            this.toBack();
            log.toFront();
            log.setVisible(true);
            
        }else{
            tambah.hide();
            Hapus.hide();
            updt.hide();
            indikatorAdmin.setText("Akses Tamu");
            login.setText("Masuk");
            IsAdmin = false;
            this.revalidate();
            try {
                this.refresh();
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_loginMouseClicked

    private void kategoriItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_kategoriItemStateChanged
        // TODO add your handling code here:
        if(kategori.getSelectedItem().toString().equals("Pasien")){
            listPasien.showListPasien(Data);
        }else if(kategori.getSelectedItem().toString().equals("Dokter")){
            listPegawai.showListPegawai(Data, 1);
        }else if(kategori.getSelectedItem().toString().equals("Perawat")){
            listPegawai.showListPegawai(Data, 2);
        }else if(kategori.getSelectedItem().toString().equals("Ruang")){
            listRuang.showRuang(Data);
        }else{
            try {
                semuaKategori.showAll(Data,listPasien.getList());
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        updtenabled();
    }//GEN-LAST:event_kategoriItemStateChanged

    private void updtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updtMouseClicked
        // TODO add your handling code here:
        int i = Data.getSelectedRow();
        Pasien p = new Pasien();
        Pegawai Peg = new Pegawai();
        ruangan r = new ruangan();
        String nama = (String) Data.getValueAt(i,1);
        
        if(updt.isEnabled()){
            if(kategori.getSelectedItem().equals("Pasien")){
                p = listPasien.getPasien(i);
                updatePas u = new updatePas(p); 
                u.toFront();
                u.setVisible(true);
                this.toBack();
       
            }else if(kategori.getSelectedItem().equals("Dokter")||
                    kategori.getSelectedItem().equals("Perawat")){
                Peg = listPegawai.getPegawai(kategori.getSelectedItem().toString(),nama);
                updatePeg up = new updatePeg(Peg);
                up.toFront();
                up.setVisible(true);
                this.toBack();
            }else if(kategori.getSelectedItem().equals("Ruang")){
                r = listRuang.getRuang(i);
                updateRuang ru = new updateRuang(r);
                ru.toFront();
                ru.setVisible(true);
                this.toBack();
            }
        }
        
        
        
        
        
    }//GEN-LAST:event_updtMouseClicked

    private void DataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DataMouseClicked
        // TODO add your handling code here:
        updtenabled();
    }//GEN-LAST:event_DataMouseClicked

    private void tambahMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tambahMouseClicked
        // TODO add your handling code here:
        Tambah t = new Tambah(listPasien,listPegawai,listRuang,listPenyakit);
        t.toFront();
        t.setVisible(true); this.toBack();
    }//GEN-LAST:event_tambahMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
            try {
                this.refresh();
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
        this.revalidate();
    }//GEN-LAST:event_formFocusGained

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
            try {
                // TODO add your handling code here:
                this.refresh();
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            this.revalidate();
    }//GEN-LAST:event_formWindowActivated

    private void HapusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HapusMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_HapusMouseClicked

    private void HapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HapusActionPerformed
        // TODO add your handling code here:
         String val = (String) Data.getValueAt(Data.getSelectedRow(), 2);
        String id = (String) Data.getValueAt(Data.getSelectedRow(), 0);
         crud c = new crud();
         
        if(kategori.getSelectedItem().equals("Pasien")||val.equals("Pasien")){
           c.deletePas(id,listPasien,Data.getSelectedRow());
        }else if(kategori.getSelectedItem().equals("Perawat")||val.equals("Perawat")||
                kategori.getSelectedItem().equals("Dokter")||val.equals("Dokter")){
            c.deletePeg(id,listPegawai,Data.getSelectedRow());
        }else if(kategori.getSelectedItem().equals("Ruang")||val.equals("Ruangan")){
            c.deleteRuang(id,listRuang,Data.getSelectedRow());
        }else if(kategori.getSelectedItem().equals("Penyakit")||val.equals("Penyakit")){
            c.deletePeny(id);
        }
        
        
            try {
                this.refresh();
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_HapusActionPerformed

    private void refreshButMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButMouseClicked
            try {
                // TODO add your handling code here:
                this.refresh();
            } catch (SQLException ex) {
                Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
            }
           // tester();
    }//GEN-LAST:event_refreshButMouseClicked

    private void detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsActionPerformed
        // TODO add your handling code here:
        int i = Data.getSelectedRow();
        Pasien p = new Pasien();
        Pegawai Peg = new Pegawai();
        ruangan r = new ruangan();
        //String nama = (String) Data.getValueAt(i,1);
        
        System.out.println(r.getNamaRuang());
        if(kategori.getSelectedItem().equals("Pasien")&&i!=-1){
            p = listPasien.getPasien(i);
            detailPas dp = new detailPas(p);
            dp.toFront();
            this.toBack();
            dp.setVisible(true);
        }else if((kategori.getSelectedItem().equals("Perawat")&&i!=-1)
                ||kategori.getSelectedItem().equals("Dokter")&&i!=-1){
             Peg = listPegawai.getPegawai(Data.getValueAt(i,4).toString(), Data.getValueAt(i, 1).toString());
             detailPeg pg = new detailPeg(Peg);
             this.toBack();
             pg.toFront();
             pg.setVisible(true);
        }else if(kategori.getSelectedItem().equals("Ruang")&&i!=-1){
            r = listRuang.getRuang(i);
            ruangDet Ruang = new ruangDet(r);
            this.toBack();
            Ruang.toFront();
            Ruang.setVisible(true);
            
        }else if(kategori.getSelectedItem().equals("Penyakit")&&i!=-1){
           
        }
    }//GEN-LAST:event_detailsActionPerformed
    public void tester(){
        for(int i =0;i<listRuang.getListRuang().size();i++){
            System.out.println(listRuang.getListRuang().get(i).getNamaRuang());
        }
    }
    
    
    private void KeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeluarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_KeluarActionPerformed

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Utama.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Utama().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Utama.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Data;
    private javax.swing.JButton Hapus;
    private javax.swing.JButton Keluar;
    private javax.swing.JLabel PKategori;
    private javax.swing.JLabel PRuang;
    private javax.swing.JLabel date;
    private javax.swing.JButton details;
    private javax.swing.JLabel indikatorAdmin;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel judul;
    private javax.swing.JComboBox<String> kategori;
    private javax.swing.JButton login;
    private javax.swing.JButton refreshBut;
    private javax.swing.JComboBox<String> ruang;
    private javax.swing.JTextField searchBar;
    private javax.swing.JLabel tagline;
    private javax.swing.JButton tambah;
    private javax.swing.JButton tombolCari;
    private javax.swing.JButton updt;
    // End of variables declaration//GEN-END:variables
}
